"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var simplr_logger_1 = require("simplr-logger");
var handlers_1 = require("simplr-logger/handlers");
var cli_helpers_1 = require("../cli-helpers");
/**
 * Console Logger.
 */
exports.LoggerConsoleMessageHandler = new handlers_1.ConsoleMessageHandler({ TimePrefix: simplr_logger_1.PrefixType.Full });
/**
 * Log levels allowed to console.
 */
exports.ConsoleMessageHandlerLevels = [simplr_logger_1.LogLevel.Information, simplr_logger_1.LogLevel.Critical];
var InitialLoggerConfig = new simplr_logger_1.LoggerConfigurationBuilder()
    .AddWriteMessageHandler({ Handler: exports.LoggerConsoleMessageHandler }, exports.ConsoleMessageHandlerLevels)
    .Build();
/**
 * Add file message handler to current CLI logger.
 *
 * @param logPath Path of a log file path.
 * @param noLogFile Prevents logging to a file (optional, default value is false).
 */
function AddFileMessageHandler(logPath, noLogFile) {
    if (noLogFile === void 0) { noLogFile = false; }
    if (noLogFile) {
        return;
    }
    var resolvedLogPath = cli_helpers_1.ResolveLogPath(logPath);
    exports.CLILogger.UpdateConfiguration(function (configBuilder) {
        var fileMessageHandler = new handlers_1.FileMessageHandler(resolvedLogPath, {
            IsServerSide: true
        });
        return configBuilder
            .AddWriteMessageHandler({ Handler: fileMessageHandler }, simplr_logger_1.LogLevel.Debug)
            .Build();
    });
}
exports.AddFileMessageHandler = AddFileMessageHandler;
/**
 * Global app logger.
 */
exports.CLILogger = new simplr_logger_1.LoggerBuilder(InitialLoggerConfig);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2xpLWxvZ2dlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9jbGkvbG9nZ2VyL2NsaS1sb2dnZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSwrQ0FBZ0c7QUFDaEcsbURBQW1GO0FBQ25GLDhDQUFnRDtBQUVoRDs7R0FFRztBQUNVLFFBQUEsMkJBQTJCLEdBQUcsSUFBSSxnQ0FBcUIsQ0FBQyxFQUFFLFVBQVUsRUFBRSwwQkFBVSxDQUFDLElBQUksRUFBRSxDQUFDLENBQUM7QUFFdEc7O0dBRUc7QUFDVSxRQUFBLDJCQUEyQixHQUFHLENBQUMsd0JBQVEsQ0FBQyxXQUFXLEVBQUUsd0JBQVEsQ0FBQyxRQUFRLENBQUMsQ0FBQztBQUVyRixJQUFNLG1CQUFtQixHQUFHLElBQUksMENBQTBCLEVBQUU7S0FDdkQsc0JBQXNCLENBQUMsRUFBRSxPQUFPLEVBQUUsbUNBQTJCLEVBQUUsRUFBRSxtQ0FBMkIsQ0FBQztLQUM3RixLQUFLLEVBQUUsQ0FBQztBQUViOzs7OztHQUtHO0FBQ0gsK0JBQXNDLE9BQWUsRUFBRSxTQUEwQjtJQUExQiwwQkFBQSxFQUFBLGlCQUEwQjtJQUM3RSxFQUFFLENBQUMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDO1FBQ1osTUFBTSxDQUFDO0lBQ1gsQ0FBQztJQUVELElBQU0sZUFBZSxHQUFHLDRCQUFjLENBQUMsT0FBTyxDQUFDLENBQUM7SUFFaEQsaUJBQVMsQ0FBQyxtQkFBbUIsQ0FBQyxVQUFBLGFBQWE7UUFDdkMsSUFBTSxrQkFBa0IsR0FBRyxJQUFJLDZCQUFrQixDQUFDLGVBQWUsRUFBRTtZQUMvRCxZQUFZLEVBQUUsSUFBSTtTQUNyQixDQUFDLENBQUM7UUFFSCxNQUFNLENBQUMsYUFBYTthQUNmLHNCQUFzQixDQUFDLEVBQUUsT0FBTyxFQUFFLGtCQUFrQixFQUFFLEVBQUUsd0JBQVEsQ0FBQyxLQUFLLENBQUM7YUFDdkUsS0FBSyxFQUFFLENBQUM7SUFDakIsQ0FBQyxDQUFDLENBQUM7QUFDUCxDQUFDO0FBaEJELHNEQWdCQztBQUVEOztHQUVHO0FBQ1UsUUFBQSxTQUFTLEdBQUcsSUFBSSw2QkFBYSxDQUFDLG1CQUFtQixDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBMb2dnZXJDb25maWd1cmF0aW9uQnVpbGRlciwgTG9nTGV2ZWwsIExvZ2dlckJ1aWxkZXIsIFByZWZpeFR5cGUgfSBmcm9tIFwic2ltcGxyLWxvZ2dlclwiO1xyXG5pbXBvcnQgeyBDb25zb2xlTWVzc2FnZUhhbmRsZXIsIEZpbGVNZXNzYWdlSGFuZGxlciB9IGZyb20gXCJzaW1wbHItbG9nZ2VyL2hhbmRsZXJzXCI7XHJcbmltcG9ydCB7IFJlc29sdmVMb2dQYXRoIH0gZnJvbSBcIi4uL2NsaS1oZWxwZXJzXCI7XHJcblxyXG4vKipcclxuICogQ29uc29sZSBMb2dnZXIuXHJcbiAqL1xyXG5leHBvcnQgY29uc3QgTG9nZ2VyQ29uc29sZU1lc3NhZ2VIYW5kbGVyID0gbmV3IENvbnNvbGVNZXNzYWdlSGFuZGxlcih7IFRpbWVQcmVmaXg6IFByZWZpeFR5cGUuRnVsbCB9KTtcclxuXHJcbi8qKlxyXG4gKiBMb2cgbGV2ZWxzIGFsbG93ZWQgdG8gY29uc29sZS5cclxuICovXHJcbmV4cG9ydCBjb25zdCBDb25zb2xlTWVzc2FnZUhhbmRsZXJMZXZlbHMgPSBbTG9nTGV2ZWwuSW5mb3JtYXRpb24sIExvZ0xldmVsLkNyaXRpY2FsXTtcclxuXHJcbmNvbnN0IEluaXRpYWxMb2dnZXJDb25maWcgPSBuZXcgTG9nZ2VyQ29uZmlndXJhdGlvbkJ1aWxkZXIoKVxyXG4gICAgLkFkZFdyaXRlTWVzc2FnZUhhbmRsZXIoeyBIYW5kbGVyOiBMb2dnZXJDb25zb2xlTWVzc2FnZUhhbmRsZXIgfSwgQ29uc29sZU1lc3NhZ2VIYW5kbGVyTGV2ZWxzKVxyXG4gICAgLkJ1aWxkKCk7XHJcblxyXG4vKipcclxuICogQWRkIGZpbGUgbWVzc2FnZSBoYW5kbGVyIHRvIGN1cnJlbnQgQ0xJIGxvZ2dlci5cclxuICpcclxuICogQHBhcmFtIGxvZ1BhdGggUGF0aCBvZiBhIGxvZyBmaWxlIHBhdGguXHJcbiAqIEBwYXJhbSBub0xvZ0ZpbGUgUHJldmVudHMgbG9nZ2luZyB0byBhIGZpbGUgKG9wdGlvbmFsLCBkZWZhdWx0IHZhbHVlIGlzIGZhbHNlKS5cclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBBZGRGaWxlTWVzc2FnZUhhbmRsZXIobG9nUGF0aDogc3RyaW5nLCBub0xvZ0ZpbGU6IGJvb2xlYW4gPSBmYWxzZSk6IHZvaWQge1xyXG4gICAgaWYgKG5vTG9nRmlsZSkge1xyXG4gICAgICAgIHJldHVybjtcclxuICAgIH1cclxuXHJcbiAgICBjb25zdCByZXNvbHZlZExvZ1BhdGggPSBSZXNvbHZlTG9nUGF0aChsb2dQYXRoKTtcclxuXHJcbiAgICBDTElMb2dnZXIuVXBkYXRlQ29uZmlndXJhdGlvbihjb25maWdCdWlsZGVyID0+IHtcclxuICAgICAgICBjb25zdCBmaWxlTWVzc2FnZUhhbmRsZXIgPSBuZXcgRmlsZU1lc3NhZ2VIYW5kbGVyKHJlc29sdmVkTG9nUGF0aCwge1xyXG4gICAgICAgICAgICBJc1NlcnZlclNpZGU6IHRydWVcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgcmV0dXJuIGNvbmZpZ0J1aWxkZXJcclxuICAgICAgICAgICAgLkFkZFdyaXRlTWVzc2FnZUhhbmRsZXIoeyBIYW5kbGVyOiBmaWxlTWVzc2FnZUhhbmRsZXIgfSwgTG9nTGV2ZWwuRGVidWcpXHJcbiAgICAgICAgICAgIC5CdWlsZCgpO1xyXG4gICAgfSk7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBHbG9iYWwgYXBwIGxvZ2dlci5cclxuICovXHJcbmV4cG9ydCBjb25zdCBDTElMb2dnZXIgPSBuZXcgTG9nZ2VyQnVpbGRlcihJbml0aWFsTG9nZ2VyQ29uZmlnKTtcclxuIl19